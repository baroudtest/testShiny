library(shiny)

# Interface utilisateur, agencement sur la page, outils d'interactions (uploader un fichier, case à cocher, sliders,...)----
ui <- fluidPage(
  
  sidebarLayout(
    sidebarPanel(
      fileInput("file",h2("table de données")),
      
      # fileIput est l'outil permettant de lire un fichier de son choix à uploader
      
      radioButtons("disp", "display",choices= c(Head ="head", All = "all"), selected= "head"),        
      br(),
      h2("Ceci est un test de la part de Florine, me recevez-vous ?")
      br(),
      br(),
      
  
    
      tableOutput("esp"),
     
      
      
    ),
    # radioButton : dans ce cas input pour décider d'afficher les quelques première ligne du fichier ou tout le fichier
    
    mainPanel(tableOutput("clean"))
    
    
  )
  
)

# mainPanel ..... : l'emplacement ou apparaitra le fichier exporté sousle bon format, le fichier est enregistré parmis les Outputs sous le nom "contents"


# traitement de données, récupération des inputs, préparation des outputs--
server <- function(input, output) {
  
  output$contents <- renderTable({
    
    # la fonction RenderTable permet de recharger la table enregistrée sous "content" si une des variables de l'application change (ici, les deux seule variables susceptible d'être modifiées sont "disp" et "file")
    
    
    req(input$file)
    
    # la fonction se lance si la variable "file" représenant le fichier chargé existe
    
    df <- read.csv(input$file$datapath,
                   header = TRUE,
                   sep = ";",
                   quote = '"')
    # df est la variable transitoire pour la table qui permettra de pouvoir choisir d'afficher l'entête du tablau ou toutes les colonnes.
    
    if(input$disp == "head") {
      return(head(df))
    }
    else {
      return(df)
    }
    # ici, on regarde si la variable "disp" correspond à "head" ou à autre chose, celle ci à été définie plus haut dans l'user interface
  }
  
  )
  
  output$clean <- renderTable({ 
    req(input$file)
    df<- read.csv(input$file$datapath,
                  header = TRUE,
                  sep = ";",
                  quote = '"')
    df$Species <- as.character(df$Species)
    
   
    
    datf <- data.frame(1,2,3,4,5,6,7)
   
    k <- colnames(df)
    colnames(datf) <- k 
    l <- nrow(df)
   s <- 1
    r <- 1
    for (i in 1:l) {
    
     if (i < l) {s <- i +1 }
      #heure <- factor(df$Hour[c(i)])
      #a <- lubridate::hms(as.character(heure))
      #c <- hour(a)
      #if (c[c(1)] > 18) { }
      #else  if (c[c(1)] < 6) {b <- b + df$Individuals[c(i)]}
      
      heurea <- factor(df$Hour[c(i)])
        heureb <- factor(df$Hour[c(s)])
      
    a <- lubridate ::hms(as.character(heurea))
    b <- lubridate ::hms(as.character(heureb))
    
    g <- as.duration(b-a)
    
      
      if (g > 1800)  {datf[c(r),] <- df[c(i),]
      
      r <- r+1}
      else if (df$Species[c(i)] == df$Species[c(s)]) {}
    else {datf[c(r),] <- df[c(i),]
      r <- r+1
      
      
      }
    }
    datf 
    })

  
  output$esp <- renderTable({
    req(input$file)
    df<- read.csv(input$file$datapath,
                  header = TRUE,
                  sep = ";",
                  quote = '"')
    df$Species <- as.character(df$Species)
    unique(df$Species)
    
  })
  
  output$agr <- renderTable({
    req(input$file)
    df<- read.csv(input$file$datapath,
                  header = TRUE,
                  sep = ";",
                  quote = '"')
    
    
    aggregate <- aggregate(Individuals ~ Species+Site, data = df, sum)
    
  })
  
  

  
  
}

# Run the app ----
shinyApp(ui = ui, server = server)

#Ceci est un test, est ce que vous le voyez ? Ouiiiiiiiiii

#Encore un dernier test afin de le garder tel quel


#Mon test aussi 


